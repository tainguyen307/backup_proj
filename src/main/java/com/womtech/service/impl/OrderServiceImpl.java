package com.womtech.service.impl;

import com.womtech.entity.Order;
import com.womtech.entity.OrderItem;
import com.womtech.entity.User;
import com.womtech.repository.CartRepository;
import com.womtech.repository.OrderItemRepository;
import com.womtech.repository.OrderRepository;
import com.womtech.repository.UserRepository;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;

import com.womtech.entity.Address;
import com.womtech.entity.Cart;
import com.womtech.service.CommissionService;
import com.womtech.service.OrderItemService;
import com.womtech.service.OrderService;
import com.womtech.service.OrderVoucherService;
import com.womtech.util.OrderStatusHelper;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
@Transactional
public class OrderServiceImpl extends BaseServiceImpl<Order, String> implements OrderService {

	@Autowired
	private OrderRepository orderRepository;

	@Autowired
	private OrderItemRepository orderItemRepository;

	@Autowired
	private CartRepository cartRepository;

	@Autowired
	private OrderItemService orderItemService;

	@Autowired
	private OrderVoucherService orderVoucherService;

	@Autowired
	private UserRepository userRepository;

	// üî• TH√äM COMMISSION SERVICE
	@Autowired
	private CommissionService commissionService;

	public OrderServiceImpl(JpaRepository<Order, String> repo) {
		super(repo);
	}

	@Override
	public List<Order> getAllOrders() {
		return orderRepository.findAll();
	}

	@Override
	public Optional<Order> getOrderById(String orderId) {
		return orderRepository.findById(orderId);
	}

	@Override
	public List<Order> getOrdersByUser(User user) {
		return orderRepository.findByUserOrderByCreateAtDesc(user);
	}

	@Override
	public List<Order> getOrdersByStatus(Integer status) {
		return orderRepository.findByStatusOrderByCreateAtDesc(status);
	}

	@Override
	public List<Order> getOrdersByVendorId(String vendorId) {
		return orderRepository.findOrdersByVendorId(vendorId);
	}

	@Override
	public List<Order> getOrdersByVendorIdAndStatus(String vendorId, Integer status) {
		return orderRepository.findOrdersByVendorIdAndStatus(vendorId, status);
	}

	@Override
	public List<Order> getOrdersByVendorIdAndDateRange(String vendorId, LocalDateTime startDate,
			LocalDateTime endDate) {
		return orderRepository.findOrdersByVendorIdAndDateRange(vendorId, startDate, endDate);
	}

	@Override
	public Long countOrdersByVendorId(String vendorId) {
		return orderRepository.countOrdersByVendorId(vendorId);
	}

	@Override
	public Long countOrdersByVendorIdAndStatus(String vendorId, Integer status) {
		return orderRepository.countOrdersByVendorIdAndStatus(vendorId, status);
	}

	@Override
	public List<OrderItem> getOrderItemsByOrderIdAndVendorId(String orderId, String vendorId) {
		return orderItemRepository.findOrderItemsByOrderIdAndVendorId(orderId, vendorId);
	}

	@Override
	@Transactional
	public Order saveOrder(Order order) {
		return orderRepository.save(order);
	}

	@Override
	@Transactional
	public void updateOrderStatus(String orderId, Integer newStatus) {
		Order order = orderRepository.findById(orderId).orElseThrow(() -> new RuntimeException("Order not found"));

		order.setStatus(newStatus);

		Integer itemStatus = OrderStatusHelper.orderStatusToItemStatus(newStatus);
		for (OrderItem item : order.getItems()) {
			item.setStatus(itemStatus);
		}

		orderRepository.save(order);
	}

	@Override
	@Transactional
	public void updateVendorItemStatus(String orderId, String orderItemId, String vendorId, Integer newItemStatus) {
		// 1Ô∏è‚É£ T√¨m order
		Order order = orderRepository.findById(orderId)
				.orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

		// 2Ô∏è‚É£ T√¨m item thu·ªôc vendor hi·ªán t·∫°i
		OrderItem item = order.getItems().stream()
				.filter(i -> i.getOrderItemID().equals(orderItemId) && i.getProduct() != null
						&& i.getProduct().getOwnerUser() != null
						&& i.getProduct().getOwnerUser().getUserID().equals(vendorId))
				.findFirst()
				.orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m thu·ªôc vendor n√†y trong ƒë∆°n h√†ng"));

		// 3Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i item
		item.setStatus(newItemStatus);

		// 4Ô∏è‚É£ Ki·ªÉm tra n·∫øu **t·∫•t c·∫£ item** trong order ƒë·ªÅu ƒë√£ ho√†n th√†nh
		boolean allDelivered = order.getItems().stream()
				.allMatch(i -> i.getStatus() == OrderStatusHelper.ITEM_STATUS_DELIVERED);

		if (allDelivered) {
			// N·∫øu t·∫•t c·∫£ item ƒë·ªÅu Delivered ‚Üí c·∫≠p nh·∫≠t tr·∫°ng th√°i order
			order.setStatus(OrderStatusHelper.STATUS_DELIVERED);
		} else {
			// N·∫øu ch∆∞a th√¨ ch·ªâ c·∫≠p nh·∫≠t theo item c√≥ tr·∫°ng th√°i th·∫•p nh·∫•t
			Integer minItemStatus = order.getItems().stream().map(OrderItem::getStatus).min(Integer::compareTo)
					.orElse(newItemStatus);

			order.setStatus(OrderStatusHelper.itemStatusToOrderStatus(minItemStatus));
		}

		orderRepository.save(order);
	}

	@Override
	@Transactional
	public void cancelOrder(String orderId) {
		Order order = orderRepository.findById(orderId).orElseThrow(() -> new RuntimeException("Order not found"));

		order.setStatus(OrderStatusHelper.STATUS_CANCELLED);
		for (OrderItem item : order.getItems()) {
			item.setStatus(OrderStatusHelper.ITEM_STATUS_CANCELLED);
		}

		order.setUpdateAt(LocalDateTime.now());
		orderRepository.save(order);
	}

	@Override
	@Transactional
	public void cancelVendorOrderItems(String orderId, String vendorId) {
		Order order = orderRepository.findById(orderId).orElseThrow(() -> new RuntimeException("Order not found"));

		boolean hasVendorItems = false;
		for (OrderItem item : order.getItems()) {
			if (item.getProduct().getOwnerUser() != null
					&& item.getProduct().getOwnerUser().getUserID().equals(vendorId)) {
				item.setStatus(OrderStatusHelper.ITEM_STATUS_CANCELLED);
				hasVendorItems = true;
			}
		}

		if (!hasVendorItems) {
			throw new RuntimeException("No items from this vendor in the order");
		}

		boolean allCancelled = order.getItems().stream()
				.allMatch(item -> item.getStatus().equals(OrderStatusHelper.ITEM_STATUS_CANCELLED));

		if (allCancelled) {
			order.setStatus(OrderStatusHelper.STATUS_CANCELLED);
		}

		orderRepository.save(order);
	}

	@Override
	@Transactional
	public void deleteOrder(String orderId) {
		orderRepository.deleteById(orderId);
	}

	@Override
	public Map<String, Object> getRevenueChartData(String vendorId, LocalDateTime start, LocalDateTime end) {
		List<Object[]> results = orderRepository.findDailyRevenueByVendorAndPeriod(vendorId, start, end);

		List<String> dates = new ArrayList<>();
		List<Double> revenues = new ArrayList<>();

		// T·∫°o danh s√°ch t·∫•t c·∫£ c√°c ng√†y trong kho·∫£ng th·ªùi gian
		LocalDate currentDate = start.toLocalDate();
		LocalDate endDate = end.toLocalDate();

		Map<LocalDate, Double> revenueMap = new HashMap<>();
		for (Object[] result : results) {
			LocalDate date = ((java.sql.Date) result[0]).toLocalDate();
			BigDecimal revenue = (BigDecimal) result[1];
			revenueMap.put(date, revenue.doubleValue());
		}

		while (!currentDate.isAfter(endDate)) {
			dates.add(currentDate.format(DateTimeFormatter.ofPattern("dd/MM")));
			revenues.add(revenueMap.getOrDefault(currentDate, 0.0));
			currentDate = currentDate.plusDays(1);
		}

		Map<String, Object> chartData = new HashMap<>();
		chartData.put("dates", dates);
		chartData.put("revenues", revenues);

		return chartData;
	}

	@Override
	public Map<String, Object> getCategoryRevenueData(String vendorId, LocalDateTime start, LocalDateTime end) {
		List<Object[]> results = orderItemRepository.findRevenueByCategoryAndVendor(vendorId, start, end);

		List<String> labels = new ArrayList<>();
		List<Double> values = new ArrayList<>();

		double totalRevenue = 0.0;

		for (Object[] result : results) {
			String categoryName = (String) result[0];
			BigDecimal revenue = (BigDecimal) result[1];

			if (categoryName == null) {
				categoryName = "Kh√¥ng ph√¢n lo·∫°i";
			}

			double revenueValue = revenue.doubleValue();
			labels.add(categoryName);
			values.add(revenueValue);
			totalRevenue += revenueValue;
		}

		// N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ m·∫£ng r·ªóng
		if (labels.isEmpty()) {
			labels.add("Kh√¥ng c√≥ d·ªØ li·ªáu");
			values.add(1.0); // Gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
		}

		Map<String, Object> categoryData = new HashMap<>();
		categoryData.put("labels", labels);
		categoryData.put("values", values);
		categoryData.put("totalRevenue", totalRevenue);

		return categoryData;
	}

	@Override
	public Map<String, Object> getTopProductsData(String vendorId, LocalDateTime start, LocalDateTime end) {
		// L·∫•y top 5 s·∫£n ph·∫©m
		Pageable topFive = PageRequest.of(0, 5);
		List<Object[]> results = orderItemRepository.findTopProductsByVendor(vendorId, start, end, topFive);

		List<String> labels = new ArrayList<>();
		List<Long> values = new ArrayList<>();

		for (Object[] result : results) {
			String productName = (String) result[0];
			Long quantity = ((Number) result[1]).longValue();

			// R√∫t g·ªçn t√™n s·∫£n ph·∫©m n·∫øu qu√° d√†i
			if (productName.length() > 20) {
				productName = productName.substring(0, 17) + "...";
			}

			labels.add(productName);
			values.add(quantity);
		}

		// N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, th√™m item m·∫∑c ƒë·ªãnh
		if (labels.isEmpty()) {
			labels.add("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o");
			values.add(0L);
		}

		Map<String, Object> topProductsData = new HashMap<>();
		topProductsData.put("labels", labels);
		topProductsData.put("values", values);

		return topProductsData;
	}

	@Override
	public Map<String, Object> getVendorOrderStatistics(String vendorId, LocalDateTime start, LocalDateTime end) {
		Map<String, Object> statistics = new HashMap<>();

		BigDecimal totalRevenue = orderItemRepository.calculateTotalRevenueByVendor(vendorId, start, end);

		Long totalOrders = orderItemRepository.countDistinctOrdersByVendor(vendorId, start, end);
		Long deliveredOrders = orderRepository.countOrdersByVendorIdAndStatus(vendorId,
				OrderStatusHelper.STATUS_DELIVERED);

		List<Object[]> ordersByStatus = orderItemRepository.countOrdersByStatus(vendorId, start, end);

		Map<String, Long> statusMap = new HashMap<>();
		for (Object[] result : ordersByStatus) {
			Integer status = (Integer) result[0];
			Long count = (Long) result[1];
			statusMap.put(status.toString(), count);
		}

		statistics.put("totalRevenue", totalRevenue != null ? totalRevenue : BigDecimal.ZERO);
		statistics.put("totalOrders", totalOrders != null ? totalOrders : 0L);
		statistics.put("ordersByStatus", statusMap);
		statistics.put("startDate", start);
		statistics.put("endDate", end);
		statistics.put("deliveredOrders", deliveredOrders);

		return statistics;
	}

	// üî• T·∫†O ORDER T·ª™ CART V√Ä T·ª∞ ƒê·ªòNG T·∫†O COMMISSION
	@Override
	@Transactional
	public Order createOrderFromCart(Cart cart, Address address, String payment_method, BigDecimal finalPrice) {
		// 1. T·∫°o Order (nh∆∞ b·∫°n c√≥)
		Order order = Order.builder().user(cart.getUser()).address(address).totalPrice(finalPrice) // t·∫°m th·ªùi, s·∫Ω c·∫≠p
																									// nh·∫≠t l·∫°i b√™n d∆∞·ªõi
				.paymentMethod(payment_method).createAt(LocalDateTime.now()).updateAt(LocalDateTime.now()).build();
		orderRepository.save(order);

		// 2. T·∫°o OrderItems t·ª´ Cart
		orderItemService.createItemsFromCart(order, cart);

		// 3. T·∫°o OrderVoucher
		orderVoucherService.createOrderVoucherFromCart(order, cart);

		// 4. T·∫†O COMMISSION CHO T·ª™NG ORDER ITEM
		List<OrderItem> orderItems = orderItemRepository.findByOrder(order);
		for (OrderItem orderItem : orderItems) {
			try {
				commissionService.createCommissionForOrderItem(orderItem);
			} catch (Exception e) {
				// Log l·ªói nh∆∞ng kh√¥ng l√†m fail transaction
				System.out.println(
						"L·ªói khi t·∫°o commission cho OrderItem " + orderItem.getOrderItemID() + ": " + e.getMessage());
			}
		}

		// --- 3.1: T√≠nh l·∫°i t·ªïng ƒë∆°n t·ª´ orderItem.netTotal ---
		BigDecimal recalculatedTotal = BigDecimal.ZERO;
		for (OrderItem item : orderItems) {
			BigDecimal price = item.getPrice();
			BigDecimal qty = BigDecimal.valueOf(item.getQuantity() == null ? 0 : item.getQuantity());
			recalculatedTotal = recalculatedTotal.add(price.multiply(qty));
		}
		order.setTotalPrice(recalculatedTotal.setScale(2, RoundingMode.HALF_UP));

		orderRepository.save(order);

		// 5. X√≥a Cart
		cart.getItems().clear();
		cart.getCartVouchers().clear();
		cartRepository.save(cart);

		return order;
	}

	@Override
	public List<Order> findByUser(User user) {
		return orderRepository.findByUser(user);
	}

	@Override
	public BigDecimal totalPrice(Order order) {
		BigDecimal total = BigDecimal.ZERO;
		List<OrderItem> items = orderItemRepository.findByOrder(order);
		if (items.isEmpty()) {
			return total;
		}

		for (OrderItem item : items) {
			BigDecimal itemTotal = item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity()));
			item.setItemTotal(itemTotal);

			total = total.add(itemTotal);
		}
		return total;
	}

	@Override
	public int totalQuantity(Order order) {
		int total = 0;
		List<OrderItem> items = orderItemRepository.findByOrder(order);
		if (items.isEmpty()) {
			return total;
		}

		for (OrderItem item : items) {
			total += item.getQuantity();
		}
		return total;
	}

	@Override
	public Page<Order> findByUser(User user, Pageable pageable) {
		return orderRepository.findByUser(user, pageable);
	}

	@Override
	public Page<Order> findByUserAndStatus(User user, int status, Pageable pageable) {
		return orderRepository.findByUserAndStatus(user, status, pageable);
	}

	// ================= SHIPPER ASSIGNMENT (d·ª±a v√†o ITEM STATUS) =================

	@Override
	public void assignShipper(String orderId, String shipperId, String vendorId) {
		Order order = orderRepository.findById(orderId)
				.orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

		// 1) Quy·ªÅn vendor: order ph·∫£i c√≥ item thu·ªôc vendor hi·ªán t·∫°i
		boolean hasVendorItems = order.getItems().stream().anyMatch(i -> i.getProduct() != null
				&& i.getProduct().getOwnerUser() != null && vendorId.equals(i.getProduct().getOwnerUser().getUserID()));
		if (!hasVendorItems) {
			throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn g√°n shipper cho ƒë∆°n h√†ng n√†y.");
		}

		// 2) Validate shipper + role SHIPPER + active theo status (status=1 l√† active)
		User shipper = userRepository.findById(shipperId)
				.orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y shipper."));
		if (!userRepository.isUserShipper(shipperId)) {
			throw new RuntimeException("T√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn kh√¥ng ph·∫£i SHIPPER.");
		}
		if (!isUserActive(shipper)) {
			throw new RuntimeException("Shipper ƒë√£ b·ªã v√¥ hi·ªáu ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông.");
		}

		// 3) Kh√¥ng cho g√°n n·∫øu ƒë∆°n ƒë√£ kho√° (m·ªçi item ƒë·ªÅu DELIVERED/CANCELLED)
		if (isOrderLockedForAssignment(order)) {
			throw new RuntimeException("ƒê∆°n ƒë√£ ho√†n t·∫•t/ƒë√£ hu·ª∑, kh√¥ng th·ªÉ g√°n shipper.");
		}

		// 4) G√°n + tracking
		order.setShipper(shipper);
		order.setAssignedAt(LocalDateTime.now());
		order.setAssignedByVendorId(vendorId);

		// 5) KH√îNG t·ª± nh·∫£y tr·∫°ng th√°i item. Vendor s·∫Ω c·∫≠p nh·∫≠t item qua UI c·ªßa b·∫°n.
		// (N·∫øu mu·ªën t·ª± bump, tu·ª≥ ch·ªçn: n·∫øu t·∫•t c·∫£ item >= PACKED th√¨ c√≥ th·ªÉ set sang
		// SHIPPED, nh∆∞ng m√¨nh ƒë·ªÉ nguy√™n an to√†n)

		// 6) C·∫≠p nh·∫≠t order.status theo "m·ª©c nh·ªè nh·∫•t" c·ªßa item (ƒë·ªìng b·ªô nh·∫π)
		Integer minItemStatus = order.getItems().stream().map(OrderItem::getStatus).filter(Objects::nonNull)
				.min(Integer::compareTo).orElse(null);
		if (minItemStatus != null) {
			order.setStatus(OrderStatusHelper.itemStatusToOrderStatus(minItemStatus));
		}

		orderRepository.save(order);
	}

	@Override
	public void unassignShipper(String orderId, String vendorId) {
		Order order = orderRepository.findById(orderId)
				.orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

		// 1) Quy·ªÅn vendor
		boolean hasVendorItems = order.getItems().stream().anyMatch(i -> i.getProduct() != null
				&& i.getProduct().getOwnerUser() != null && vendorId.equals(i.getProduct().getOwnerUser().getUserID()));
		if (!hasVendorItems) {
			throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn hu·ª∑ g√°n shipper cho ƒë∆°n h√†ng n√†y.");
		}

		// 2) Kh√¥ng cho hu·ª∑ g√°n khi:
		// - ƒê∆°n ƒë√£ kho√° (m·ªçi item DELIVERED/CANCELLED)
		// - HO·∫∂C c√≥ b·∫•t k·ª≥ item ƒë√£ sang SHIPPED (ƒëang giao)
		if (isOrderLockedForAssignment(order) || hasAnyItemFromStatus(order, OrderStatusHelper.ITEM_STATUS_SHIPPED)) {
			throw new RuntimeException("ƒê∆°n ƒë√£ ho√†n t·∫•t/ƒë√£ hu·ª∑ ho·∫∑c ƒë√£ giao/ƒëang giao, kh√¥ng th·ªÉ hu·ª∑ g√°n.");
		}

		order.setShipper(null);
		order.setAssignedAt(null);
		order.setAssignedByVendorId(null);

		// 3) ƒê·ªìng b·ªô order.status (v·∫´n d·ª±a theo min item status hi·ªán t·∫°i)
		Integer minItemStatus = order.getItems().stream().map(OrderItem::getStatus).filter(Objects::nonNull)
				.min(Integer::compareTo).orElse(null);
		if (minItemStatus != null) {
			order.setStatus(OrderStatusHelper.itemStatusToOrderStatus(minItemStatus));
		}

		orderRepository.save(order);
	}

	@Override
	public List<Order> getOrdersByShipper(String shipperId) {
		return orderRepository.findByShipper_UserIDOrderByCreateAtDesc(shipperId);
	}

	@Override
	public List<Order> getOrdersByShipperAndStatus(String shipperId, Integer status) {
		return orderRepository.findByShipper_UserIDAndStatusOrderByCreateAtDesc(shipperId, status);
	}

	@Override
	public List<Order> getUnassignedOrdersByVendor(String vendorId) {
		return orderRepository.findUnassignedOrdersByVendor(vendorId);
	}

	@Override
	public List<Order> getOrdersByVendorAndShipper(String vendorId, String shipperId) {
		return orderRepository.findOrdersByVendorAndShipper(vendorId, shipperId);
	}

	// ================= Helpers =================

	/** Active n·∫øu status==1 (ho·∫∑c null th√¨ coi nh∆∞ active tu·ª≥ thi·∫øt k·∫ø c·ªßa b·∫°n) */
	private boolean isUserActive(User u) {
		Integer s = (u != null) ? u.getStatus() : null;
		return s == null || s == 1;
	}

	/**
	 * ƒê∆°n coi nh∆∞ "kho√°" cho g√°n/hu·ª∑ khi T·∫§T C·∫¢ item ƒë·ªÅu DELIVERED ho·∫∑c CANCELLED
	 */
	private boolean isOrderLockedForAssignment(Order order) {
		if (order.getItems() == null || order.getItems().isEmpty())
			return false;

		return order.getItems().stream()
				.allMatch(i -> i.getStatus() != null && (i.getStatus().equals(OrderStatusHelper.ITEM_STATUS_DELIVERED)
						|| i.getStatus().equals(OrderStatusHelper.ITEM_STATUS_CANCELLED)));
	}

	/** C√≥ b·∫•t k·ª≥ item ƒë·∫°t/qua m·ªôt m·ªëc status n√†o ƒë√≥ (v√≠ d·ª• SHIPPED) */
	private boolean hasAnyItemFromStatus(Order order, int thresholdStatus) {
		return order.getItems() != null
				&& order.getItems().stream().anyMatch(i -> i.getStatus() != null && i.getStatus() >= thresholdStatus);
	}
}