package com.womtech.security;

import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * TokenRevokeService ‚Äì qu·∫£n l√Ω danh s√°ch JWT b·ªã thu h·ªìi (blacklist).
 * 
 * Phi√™n b·∫£n n√†y ch·∫°y in-memory (d√†nh cho m√¥i tr∆∞·ªùng dev ho·∫∑c local test). Khi
 * tri·ªÉn khai th·ª±c t·∫ø (deploy nhi·ªÅu instance), b·∫°n c√≥ th·ªÉ vi·∫øt th√™m b·∫£n Redis
 * ho·∫∑c Database ƒë·ªÉ l∆∞u danh s√°ch token b·ªã revoke.
 */
@Service
public class TokenRevokeService {

	// L∆∞u token v√† th·ªùi ƒëi·ªÉm h·∫øt h·∫°n (expiry) c·ªßa n√≥.
	private final Map<String, Long> revokedTokens = new ConcurrentHashMap<>();

	/**
	 * Thu h·ªìi token ‚Äì th√™m token v√†o danh s√°ch blacklist cho ƒë·∫øn khi h·∫øt h·∫°n.
	 *
	 * @param token  chu·ªói JWT c·∫ßn thu h·ªìi
	 * @param expiry th·ªùi ƒëi·ªÉm token h·∫øt h·∫°n
	 */
	public void revoke(String token, Instant expiry) {
		if (token == null || token.isBlank())
			return;
		long expMillis = expiry != null ? expiry.toEpochMilli() : Instant.now().toEpochMilli();
		revokedTokens.put(token, expMillis);
	}

	/**
	 * Ki·ªÉm tra token c√≥ b·ªã thu h·ªìi kh√¥ng.
	 * 
	 * @param token chu·ªói JWT
	 * @return true n·∫øu token ƒë√£ b·ªã revoke v√† ch∆∞a h·∫øt h·∫°n
	 */
	public boolean isRevoked(String token) {
		if (token == null || token.isBlank())
			return false;
		Long exp = revokedTokens.get(token);
		if (exp == null)
			return false;

		long now = Instant.now().toEpochMilli();
		if (exp <= now) {
			// token ƒë√£ h·∫øt h·∫°n t·ª± nhi√™n, x√≥a cho g·ªçn
			revokedTokens.remove(token);
			return false;
		}
		return true; // token ƒëang b·ªã thu h·ªìi
	}

	/**
	 * D·ªçn d·∫πp token ƒë√£ h·∫øt h·∫°n kh·ªèi danh s√°ch blacklist. (G·ªçi ƒë·ªãnh k·ª≥ n·∫øu mu·ªën,
	 * kh√¥ng b·∫Øt bu·ªôc)
	 */
	public void purgeExpired() {
		long now = Instant.now().toEpochMilli();
		revokedTokens.entrySet().removeIf(e -> e.getValue() <= now);
	}

	/**
	 * Force revoke t·∫•t c·∫£ tokens (d√πng khi server restart)
	 */
	public void revokeAllTokens() {
		// Clear t·∫•t c·∫£ tokens ƒë√£ revoke
		revokedTokens.clear();
		System.out.println("üî• All tokens revoked - fresh start");
	}

	/**
	 * Revoke t·∫•t c·∫£ tokens hi·ªán t·∫°i (d√πng khi server restart)
	 * Th√™m t·∫•t c·∫£ tokens v√†o blacklist v·ªõi expiry time ng·∫Øn
	 */
	public void revokeAllCurrentTokens() {
		// Clear t·∫•t c·∫£ tokens ƒë√£ revoke
		revokedTokens.clear();
		
		// Revoke t·∫•t c·∫£ tokens hi·ªán t·∫°i v·ªõi expiry time ng·∫Øn (1 gi√¢y)
		// ƒêi·ªÅu n√†y s·∫Ω l√†m cho t·∫•t c·∫£ tokens hi·ªán t·∫°i b·ªã invalid
		long shortExpiry = Instant.now().plusSeconds(1).toEpochMilli();
		
		// Th√™m m·ªôt token dummy ƒë·ªÉ ƒë·∫£m b·∫£o logic ho·∫°t ƒë·ªông
		revokedTokens.put("DUMMY_TOKEN", shortExpiry);
		
		System.out.println("üî• All current tokens revoked - fresh start");
	}
}
